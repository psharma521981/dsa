-- Return the first non-repeated char in the string
-- LRU Cache implementation
Rotating the matrix from 90 to 270 degrees
Doubly linked List in Java
Spiral Matrix
Design a parking lot
Multi-floor support
Multi-location support
Scalable
Sorting algo, 2nd largest no (w/o priority queue as a theory for the same was asked ),

-- Find the Missing Number: Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

Maximum Subarray Sum: Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

Rotate Array: Rotate an array to the right by k steps, where k is non-negative.

Merge Sorted Arrays: Given two sorted arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Product of Array Except Self: Given an array nums of n integers, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

-- Find All Duplicates in an Array: Given an array of integers, 1 ≤ a[i] ≤ n (n is the size of the array), some elements appear twice and others appear once. Find all the elements that appear twice in this array.

-- Two Sum: Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

Move Zeroes: Given an array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Container With Most Water: Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.

Find Peak Element: A peak element is an element that is strictly greater than its neighbors. Given an integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

Sort Colors: Given an array with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

Next Permutation: Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers. If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).

Jump Game: Given an array of non-negative integers nums, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Determine if you can reach the last index.

Valid Sudoku: Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:
Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.

Set Matrix Zeroes: Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0. Do it in-place.

Search in Rotated Sorted Array: Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand. You are given a target value to search. If found in the array return its index, otherwise return -1.

Combination Sum: Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target.

Subarray Sum Equals K: Given an array of integers nums and an integer k, return the total number of continuous subarrays whose sum equals to k.

First Missing Positive: Given an unsorted integer array nums, find the smallest missing positive integer.

Maximum Product Subarray: Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.
------------------------------------------------------------------------------------------
run single linst problem first,
run doubly linked list problem then
Data Structures Coding Interview Questions
1. Implement LRU(Least Recently Used) Cache
2. Write a function to determine whether duplicate elements in a given array are within a given distance of each other.
  2 Approachs - a) Hashmap to store no. if found then check index differnce and if less than equals to k then found true
     b) evenry no. check entore array for it's duplicate and if within the range then found
3. Write a recursive function to calculate the height of a binary tree in Java.
       check height of left node and right node and whichevenr is big then return 1+ into it. Leaf node is heigh is 0
4. Write Java code to count number of nodes in a binary tree
    Static variable to count all recursive call
5. Print Left view of any binary trees.
    alway call left node recursive call for each level. A variable for counting level (static) increment by + everytime left node executes.
    so right node will not printed. for every level only left node printed if available then static variable increased.
6. Given an m x n 2D grid map of &#39;1’s which represents land and &#39;0’s that represents
water return the number of islands (surrounded by water and formed by connecting adjacent
lands in 2 directions - vertically or horizontally).
  done previously
7. What is topological sorting in a graph?
8. Write a program to remove duplicates from a sorted array in place?
    using array index search the compare the number with number index
9. Write a function for zigzag traversal in a binary tree
10. Write a function to sort a linked list of 0s, 1s and 2s
        1) Approach need to code - count 0,1,2 and replace the entire linked list
        2) Approach 2 to connect all 0 to 0 and 1 to 1 and 2 to 2, while traversing it and connect them together
11. Write a function to detect cycle in an undirected graph
12. Write a function to convert an infix expression to postfix expression
    Need to code
13. Write a function to find the maximum for each and every contiguous subarray of size k.
14. Write a function to merge two sorted binary search tree
        a) convert BST to arrayLists
        b) merge both the list
        c) consctrut the bst from merged list
        try to create program for itx
15. Write a function to print all unique rows of the given matrix.
16. Write a function to find number of subarrays with product less than K
17. Find the subsequence of length 3 with the highest product from a sequence of non-negative integers, with the elements in increasing order.
18. Write a function to implement Quicksort on Doubly Linked List
19. Write a function to connect nodes at the same level of a binary tree.
    Need to code it
20. Write a function to find number of structurally unique binary trees are possible

Meta - top k heavy hitter, int 1 lca, atoi, int 2 sliding window and skip list bombed at skipist with comm break down
Recursion
Rotton oranges (need to code)
Gate and obstacle problem (need to code)

flextron ---------

/*
Given an array of integers, return an list of integers which contains
[1st integer, Sum of next 2 integers (2nd, 3rd), Sum of next 3 integers (4th, 5th, 6th)] and so on
so on means sum up next 4 , next 5, next 6, next 7

Input :: [1,6,8,5,9,4,7,2]
Output :: [1,14,18,9]

Input :: [1,6,8,5,9,4,7,2,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
Output :: [1,14,18,29,50,60,10]

in the result
1st Value - 1
2nd Value - 6 + 8 -> 14
3rd Value - 5 + 9 + 4 -> 18
4th Value - 7 + 2 -> Sum of next Four elements but four elements are not present in the array so will sum up the remaining values -> 9

Your algorithms should work for assuming there can be n elements in the array
*/



import java.util.*;
class Solution{
   public static void main(String[] args){
        System.out.println(summation(new int[]{1,6,8,5,9,4,7,2})); // [1,14,18,9]
    }
    private static List<Integer> summation(int[] arr){

      //Validation of array

      //Calculate the size of array and initialize window size and based on window size ru a loop for those indexes and check the leftover element
      //If window size is greater then lefover element then calculate the sum of leftover
      List<Integer> res = new ArrayList<>();
      if(arr == null)
        return res;

      int windowSize = 1;
      int length = arr.length;
      int startIndex = 0;
      int endIndex = startIndex * windowSize;

      for(;windowSize<length;windowSize++) {
        int sum = 0;

        endIndex = startIndex + windowSize; // starrtIndex + windowSize
        endIndex = (endIndex >= length) ? length - 1 : endIndex;

        while(startIndex<=endIndex) {
          sum+=arr[startIndex];
          startIndex++;
        }
        res.add(sum);

        if(startIndex>=length)
          break;
      }

    }
}


Given a String as input
input :: abhay
Sort this string based on the frequency of the characters and if the frequency of 2 characters is same
then we sort based on the alphabetical order

output :: aabhy

input :: pankaj
output :: aajkpn


private String sortStringByCharacterFrequency(String str){

   //Validate the input
   //String to character array
   //Calculate teh frequency
   //Map<Character,Integer> frequencyMap;
   //Sort Map.Entry frequency, characters
   //Arrange the characters on the basis on frequency

   //Integare array based on index of acci value
		List<Character>[]
		1 -> [a, b, c]
    2 -> []
}

Locale -> Transalation
Map<String(Locale), (Resource Bundle)Map<String(word), Value(transalation)>>

